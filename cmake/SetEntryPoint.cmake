macro(Efl_TargetAddentry __tgt __vis)
  if(${ARGC} GREATER 2)
    __efl_parse_entry("${ARGV2}")
  else()
    set(__EFL_ENTRY "cppmain")
    set(__EFL_VALID_ENTRY ON)
  endif()
  
  if(__EFL_VALID_ENTRY)
    add_library(${__tgt}-entry STATIC $ENV{__EFL_ENTRY_SRC}/EntryMain.cpp)
    target_compile_definitions(${__tgt}-entry PUBLIC EFLI_SHARED_=0)
    target_link_libraries(${__tgt}-entry PUBLIC __efl_entry_api)
    target_compile_definitions(${__tgt}-entry PUBLIC EFL_ENTRYPOINT=${__EFL_ENTRY})
    target_link_libraries(${__tgt} ${__vis} ${__tgt}-entry)
    unset(__EFL_ENTRY)
  endif()

  unset(__EFL_VALID_ENTRY)
endmacro()

function(__efl_parse_entry __entry)
  string(REGEX MATCHALL "[^ ]+" __EFL_PARSED_ENTRY ${__entry})
  if(EFL_PERMISSIVE_NAMING)
    string(REGEX REPLACE "[;-]" "_" __EFL_PARSED_ENTRY "${__EFL_PARSED_ENTRY}")
  endif()

  string(REGEX MATCH "^[_a-zA-Z]+$" __EFL_PARSED_ENTRY_CHECK "${__EFL_PARSED_ENTRY}")
  if(__EFL_PARSED_ENTRY_CHECK STREQUAL "")
    set(__EFL_VALID_ENTRY OFF)
    message(SEND_ERROR "[efl::entry] Invalid entry-point `${__entry}`")
  else()
    set(__EFL_VALID_ENTRY ON)
    set(__EFL_ENTRY "${__EFL_PARSED_ENTRY_CHECK}")
    __efl_entry_propagate(__EFL_ENTRY)
  endif()

  __efl_entry_propagate(__EFL_VALID_ENTRY)
endfunction()